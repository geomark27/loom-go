package server

import (
	"context"
	"net/http"
	"time"

	"{{.ModuleName}}/internal/app/handlers"
	"{{.ModuleName}}/internal/app/repositories"
	"{{.ModuleName}}/internal/app/services"
	"{{.ModuleName}}/internal/platform/config"
	"{{.ModuleName}}/internal/shared/middleware"

	"github.com/gorilla/mux"
)

// Server representa el servidor HTTP
type Server struct {
	config     *config.Config
	router     *mux.Router
	httpServer *http.Server
}

// New crea una nueva instancia del servidor con todas las dependencias inyectadas
func New(cfg *config.Config) *Server {
	// Crear repositorios
	userRepo := repositories.NewUserRepository()

	// Crear servicios (inyectando repositorios)
	userService := services.NewUserService(userRepo)

	// Crear handlers (inyectando servicios)
	healthHandler := handlers.NewHealthHandler()
	userHandler := handlers.NewUserHandler(userService)

	// Crear router
	router := mux.NewRouter()

	// Configurar middleware global
	corsMiddleware := middleware.NewCORSMiddleware(cfg.CorsAllowedOrigins)
	router.Use(corsMiddleware)

	// Registrar rutas
	registerRoutes(router, healthHandler, userHandler)

	// Configurar servidor HTTP
	httpServer := &http.Server{
		Addr:         ":" + cfg.Port,
		Handler:      router,
		ReadTimeout:  15 * time.Second,
		WriteTimeout: 15 * time.Second,
		IdleTimeout:  60 * time.Second,
	}

	return &Server{
		config:     cfg,
		router:     router,
		httpServer: httpServer,
	}
}

// Start inicia el servidor HTTP
func (s *Server) Start() error {
	return s.httpServer.ListenAndServe()
}

// Shutdown apaga el servidor de forma elegante
func (s *Server) Shutdown(ctx context.Context) error {
	return s.httpServer.Shutdown(ctx)
}
