package users

import (
	"sync"
	"time"
)

// repository es la implementación privada de Repository
// En este ejemplo usamos una implementación en memoria
// En producción, esto sería reemplazado por una base de datos real
type repository struct {
	users  map[int]*User
	nextID int
	mutex  sync.RWMutex
}

// NewRepository crea una nueva instancia de Repository
func NewRepository() Repository {
	repo := &repository{
		users:  make(map[int]*User),
		nextID: 1,
	}

	// Agregar algunos usuarios de ejemplo
	repo.seedData()

	return repo
}

// seedData crea algunos usuarios de ejemplo
func (r *repository) seedData() {
	users := []*User{
		{
			ID:        1,
			Name:      "Juan Pérez",
			Email:     "juan@example.com",
			Age:       25,
			CreatedAt: time.Now(),
			UpdatedAt: time.Now(),
		},
		{
			ID:        2,
			Name:      "María García",
			Email:     "maria@example.com",
			Age:       30,
			CreatedAt: time.Now(),
			UpdatedAt: time.Now(),
		},
		{
			ID:        3,
			Name:      "Carlos López",
			Email:     "carlos@example.com",
			Age:       28,
			CreatedAt: time.Now(),
			UpdatedAt: time.Now(),
		},
	}

	for _, user := range users {
		r.users[user.ID] = user
		if user.ID >= r.nextID {
			r.nextID = user.ID + 1
		}
	}
}

// GetAll obtiene todos los usuarios
func (r *repository) GetAll() ([]User, error) {
	r.mutex.RLock()
	defer r.mutex.RUnlock()

	users := make([]User, 0, len(r.users))
	for _, user := range r.users {
		users = append(users, *user)
	}

	return users, nil
}

// GetByID obtiene un usuario por su ID
func (r *repository) GetByID(id int) (*User, error) {
	r.mutex.RLock()
	defer r.mutex.RUnlock()

	if user, exists := r.users[id]; exists {
		// Retornar una copia para evitar modificaciones accidentales
		userCopy := *user
		return &userCopy, nil
	}

	return nil, nil
}

// GetByEmail obtiene un usuario por su email
func (r *repository) GetByEmail(email string) (*User, error) {
	r.mutex.RLock()
	defer r.mutex.RUnlock()

	for _, user := range r.users {
		if user.Email == email {
			// Retornar una copia
			userCopy := *user
			return &userCopy, nil
		}
	}

	return nil, nil
}

// Create crea un nuevo usuario
func (r *repository) Create(user *User) (*User, error) {
	r.mutex.Lock()
	defer r.mutex.Unlock()

	// Asignar ID y timestamps
	user.ID = r.nextID
	r.nextID++
	user.CreatedAt = time.Now()
	user.UpdatedAt = time.Now()

	// Guardar el usuario
	r.users[user.ID] = user

	// Retornar una copia
	userCopy := *user
	return &userCopy, nil
}

// Update actualiza un usuario existente
func (r *repository) Update(user *User) (*User, error) {
	r.mutex.Lock()
	defer r.mutex.Unlock()

	if _, exists := r.users[user.ID]; exists {
		user.UpdatedAt = time.Now()
		r.users[user.ID] = user

		// Retornar una copia
		userCopy := *user
		return &userCopy, nil
	}

	return nil, nil
}

// Delete elimina un usuario por su ID
func (r *repository) Delete(id int) error {
	r.mutex.Lock()
	defer r.mutex.Unlock()

	delete(r.users, id)
	return nil
}
