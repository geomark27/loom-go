package server

import (
	"encoding/json"
	"net/http"
	"time"

	"github.com/gorilla/mux"
)

var startTime = time.Now()

// registerHealthRoutes registra las rutas de health check
func registerHealthRoutes(router *mux.Router) {
	api := router.PathPrefix("/api/v1").Subrouter()

	// Health endpoints
	api.HandleFunc("/health", healthHandler).Methods("GET")
	api.HandleFunc("/health/ready", readyHandler).Methods("GET")

	// Ruta raíz
	router.HandleFunc("/", rootHandler).Methods("GET")
}

// healthHandler retorna el estado de salud del servicio
func healthHandler(w http.ResponseWriter, r *http.Request) {
	response := map[string]interface{}{
		"status":    "healthy",
		"timestamp": time.Now(),
		"service":   "{{.Name}}",
		"version":   "v1.0.0",
		"uptime":    time.Since(startTime).String(),
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(response)
}

// readyHandler retorna el estado de preparación del servicio
func readyHandler(w http.ResponseWriter, r *http.Request) {
	response := map[string]interface{}{
		"status":    "ready",
		"timestamp": time.Now(),
		"checks": map[string]string{
			"service": "ok",
			// "database": "ok", // Cuando se implemente
			// "cache":    "ok", // Cuando se implemente
		},
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(response)
}

// rootHandler es el handler de la ruta raíz
func rootHandler(w http.ResponseWriter, r *http.Request) {
	response := map[string]interface{}{
		"message":        "¡Bienvenido a {{.Name}}!",
		"status":         "success",
		"version":        "v1.0.0",
		"architecture":   "modular",
		"generated_with": "Loom",
		"endpoints": map[string]string{
			"health": "/api/v1/health",
			"users":  "/api/v1/users",
			"docs":   "/docs/API.md",
		},
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(response)
}
