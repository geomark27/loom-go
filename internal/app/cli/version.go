package cli

import (
	"fmt"

	"github.com/geomark27/loom-go/internal/version"
	"github.com/spf13/cobra"
)

var versionCmd = &cobra.Command{
	Use:   "version",
	Short: "Muestra la versi√≥n de Loom CLI y del proyecto actual",
	Long: `Muestra informaci√≥n de versiones:
  - Versi√≥n del CLI de Loom
  - Versi√≥n del proyecto actual (si est√° en un proyecto Loom)
  - Estado de actualizaci√≥n`,
	RunE: runVersion,
}

func init() {
	rootCmd.AddCommand(versionCmd)
}

func runVersion(cmd *cobra.Command, args []string) error {
	fmt.Printf("üîß Loom CLI v%s\n", version.Current.String())

	// Intentar detectar versi√≥n del proyecto
	projectVersion, err := version.DetectProjectVersion()
	if err == nil {
		fmt.Printf("üì¶ Proyecto actual: v%s\n", projectVersion.String())

		// Comparar versiones
		if projectVersion.Compare(version.Current) < 0 {
			fmt.Printf("\n‚ö†Ô∏è  Tu proyecto usa una versi√≥n antigua de Loom\n")
			fmt.Printf("üí° Actualiza con: loom upgrade\n")
		} else if projectVersion.Compare(version.Current) == 0 {
			fmt.Printf("‚úÖ Tu proyecto est√° actualizado\n")
		} else {
			fmt.Printf("‚ö†Ô∏è  Tu proyecto usa una versi√≥n m√°s nueva que el CLI\n")
			fmt.Printf("üí° Actualiza el CLI de Loom\n")
		}
	} else {
		fmt.Printf("\n‚ÑπÔ∏è  No se detect√≥ un proyecto Loom en el directorio actual\n")
	}

	return nil
}
